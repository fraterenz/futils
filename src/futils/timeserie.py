"""We load and process csv files that represent the evolution over time of a
quantity of interest generated by stochastic simulations.
"""
from typing import List, NewType
from pathlib import Path
import numpy as np
import abc


Dynamic = NewType("Dynamic", list)


class SimulationOptions(metaclass=abc.ABCMeta):
    @classmethod
    def __subclasshook__(cls, subclass):
        return (
            hasattr(subclass, "load_dynamic")
            and callable(subclass.load_dynamic)
            or NotImplemented
        )

    @abc.abstractclassmethod
    def load_dynamic(self) -> Dynamic:
        raise NotImplementedError


class Timeserie(metaclass=abc.ABCMeta):
    @classmethod
    def __subclasshook__(cls, subclass):
        return (
            hasattr(subclass, "load_dynamic_from_file")
            and callable(subclass.load_dynamic_from_file)
            and hasattr(subclass, "load_dynamic_from_options")
            and callable(subclass.load_dynamic_from_options)
            or NotImplemented
        )

    @abc.abstractclassmethod
    def load_dynamic_from_file(cls, file: Path) -> Dynamic:
        raise NotImplementedError

    @classmethod
    def load_dynamic_from_options(cls, options: SimulationOptions) -> Dynamic:
        return options.load_dynamic()


class Uniformise:
    @staticmethod
    def make_array(dynamics: List[Dynamic]) -> np.ndarray:
        """Create an array of dynamics with shape `len(dynamics)` x t where t
        is the maximal number of entries found in `dynamics`, i.e. the slowest
        evolving dynamic from the list of dynamics.

        Fast evolving dynamics are padded by `np.nan` values, hence the
        returned array is of type float.
        """
        assert len(dynamics) > 0, "list of histograms is empty"
        assert len(dynamics) > 1, "found only one histogram"
        dynamics_uniformised = []
        t_max = max(map(len, dynamics))
        for d in dynamics:
            for i in range(0, t_max):
                try:
                    dynamics_uniformised.append(d[i])
                except IndexError:
                    dynamics_uniformised.append(np.nan)
        return np.array(dynamics_uniformised, dtype=float).reshape(
            (len(dynamics), t_max)
        )
